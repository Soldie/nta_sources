{
  "name": "redisq",
  "version": "0.1.13",
  "homepage": "https://github.com/runk/redisq",
  "description": "Fast redis based queue",
  "keywords": [
    "redis",
    "queue"
  ],
  "author": {
    "name": "Shirokov Dmitry",
    "email": "deadrunk@gmail.com"
  },
  "dependencies": {
    "redis": "0.8.2",
    "express": "3.0.5",
    "jade": "0.27.7",
    "async": "0.1.22"
  },
  "devDependencies": {
    "mocha": ">= 1.8"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:runk/redisq.git"
  },
  "bugs": {
    "mail": "deadrunk@gmail.com",
    "url": "http://github.com/runk/redisq/issues"
  },
  "scripts": {
    "test": "mocha -R spec --recursive"
  },
  "main": "index.js",
  "engine": {
    "node": ">=0.8.0",
    "npm": "1"
  },
  "licences": [
    {
      "type": "LGPL2.1",
      "url": "http://www.gnu.org/licenses/lgpl-2.1.txt"
    }
  ],
  "readme": "\nredisq [![Build Status](https://travis-ci.org/runk/redisq.png)](https://travis-ci.org/runk/redisq)\n=====\n\nFast message processing queue backed up by redis and nodejs.\n\n## Installation\n\n    npm install redisq\n\n\n## Usage\n\nSample code that shows how to create a new task and push it to the queue.\n\n    var redisq = require('redisq');\n    redisq.options({ \"redis\": {\n        \"host\": \"example.com\",\n        \"port\": 6379\n    }});\n\n    var queue = redisq.queue('dummy');\n    var task = { \"foo\": { \"bar\": true }, \"data\": [10, 20] };\n    queue.push(task);\n\nBy default queue tries to establish a connection with redis server running on the localhost.\nOtherwise you can change this behaviour by using `options` function.\n\n    redisq.options({ \"redis\": {\n        \"host\": \"example.com\",\n        \"port\": 6379\n    }});\n\nTo process your messages you have to create one or multiply clients that will\n'listen' for new tasks and handle them in appropriate way.\n\n    var redisq = require('redisq');\n    redisq.options({ \"redis\": {\n        \"host\": \"example.com\",\n        \"port\": 6379\n    }});\n\n    var queue = redisq.queue('dummy'),\n        concurrency = 16;\n\n    queue.process(function(task, done) {\n        console.log(task); // -> { \"foo\": { \"bar\": true }, \"data\": [10, 20] }\n        done(null);\n    }, concurrency);\n\nPlease note that you have to call `done` function and pass error as the first argument\n(if there are any).\n\nThe second argument is optional data that will replace the current task (if it fails) with the new data. This can be used for keep track of the number of tries, or updating the data to be worked on based on certain fail conditions.\n\nFor example:\n\n    var request = require(\"request\");\n    queue.process(function(task, done){\n        request\n            .get(task.url + \"/api/data.json\")\n            .query({something: task.something})\n            .end(function(err, res){\n                if(err) {\n                    //Retry the task with the same data\n                    return done(err);\n                }\n\n                if(!res.results) {\n                    //Update the task's url property to try a different version of the api\n                    task.url = task.url + \"/v2/\";\n                    return done(err, task);\n                }\n\n                //Otherwise everything is all good in the hood\n                return done(null);\n            });\n    });\n\nIf task failed, it will be pushed back to the queue for another attempt.\nOtherwise you can set a `retry` flag to false so failed tasks will be ignored.\n\n    var queue = redisq.queue(\"myqueue\");\n    queue.retry = false;\n\n## Frontend\n\nModule has a useful frontend that you can use for monitoring of the queue status.\nBy default queue saves statistics to redis once a minute and stores it for 14 days.\nTo run it use the following code:\n\n    var frontend = require('redisq/frontend');\n    frontend.listen();\n\n![frontend](http://i.steppic.com/6/b/9/5/6b95ef357cbd101529e48d011349e1c7/0.png)\n\nIn case if you want to customize host, port or provide a callback, you can pass additional arguments to the `listen` metod:\n\n    var\n        frontend = require('redisq/frontend'),\n        options = {\n            \"redis\": {\n                \"host\": \"example.com\",\n                \"port\": 6379\n            }\n        };\n\n    // frontend.listen(port, [hostname], [options], [callback])\n    frontend.listen(3000, 'localhost', options, function() {\n        console.log(\"Redisq frontend running on port 3000\");\n    });\n\nFrontend uses express framework and exposes `app` for customization, for example adding basic authentication:\n\n    var\n        frontend = require(\"./frontend\"),\n        express = require(\"express\");\n\n    frontend.app.use(express.basicAuth(\"user\", \"pass\"));\n    frontend.listen(3000);\n\nAlso you can setup your monitoring tools to check the queue health by using special `/status` uri:\n\n    $ curl \"http://localhost:3000/status\"\n    {\n      \"status\": 200,\n      \"queued\": 2651,\n      \"problems\": {}\n    }\n\nThis method returns `200` if everything is fine, otherwise status would be `500`. The check fetches\nlast 15 minutes of history and detects if your workers can't handle all tasks you create.\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "redisq@0.1.13",
  "_from": "redisq"
}
